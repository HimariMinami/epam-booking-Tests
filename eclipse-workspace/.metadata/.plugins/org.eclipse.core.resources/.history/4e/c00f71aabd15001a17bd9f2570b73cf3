package accommodations;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class BookingTest {

	private static final String BOOKING_URL = "https://www.booking.com/";
	private static final String DESTINATION_1 = "Литва";
	private static final String DESTINATION_2 = "Клайпеда";
	private static final String DESTINATION_3 = "Вильнюс";
	
	private WebDriver driver;
	
	@BeforeClass(description = "Start browser!")
	public void startBrowser()
	{
		driver = new FirefoxDriver();
		driver.get(BOOKING_URL);
	}
	
	@BeforeClass(dependsOnMethods = "startBrowser", description = "Add implicite wait and maximize window")
	public void addImplicitly()
	{
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		// Maximize browser window
		driver.manage().window().maximize();
	}
	
	@Test(description = "Найти как минимум 10 вариантов проживания в Вильнюсе на неделю для 1 человека")
	public void testFilterCity()
	{
		// Найти места проживания на неделю с 23 по 29 декабря в Литве для 1 человека, проверить верное отображение заголовка.
		// Отфильтровать поиск для города Вильнюс. Проверить что отобразилось как минимум 10 вариантов проживания.
		PageFactory.initElements(driver, BookingMainPage.class).openAccomodationsPageFilter(DESTINATION_1, 1, 0, 1, false);
		PageFactory.initElements(driver, BookingAccomodationsPage.class).accomodationCity(driver, DESTINATION_1, 10);
		
		//Assert.assertTrue(PageFactory.initElements(driver, BookingAccomodationsPage.class).cityNumIsCorrect(driver), "The number of city is not correct!");
	}
	
	@Test(description = "Найти как минимум 5 вариантов проживания с 3 свободными номерами в Клайпеде на неделю на 4 взрослых и ребенка.")
	public void testAccomodationRoom()
	{
		// Найти как минимум 5 вариантов проживания с 3 свободными номерами на неделю с 23 по 29 декабря в Клайпеде,
		// на четверых взрослых и ребенка 12 лет.
		// Выбрать первое место из списка и проверить достоверность информации про 3 свободных номера.
		PageFactory.initElements(driver, BookingMainPage.class).openAccomodationsPageFilter(DESTINATION_2, 4, 1, 3, false);
		PageFactory.initElements(driver, BookingAccomodationsPage.class).accomodationDescription1(driver, DESTINATION_2, 5);
		PageFactory.initElements(driver, BookingAccomodationPage.class).accomodationSelectRoom(driver, 3);
	}
	
	@Test(description = "Найти как миниммум 2 отеля с выгодным предложением по работе в Польше на неделю для 1 человека")
	public void testWorkCheckBoxProfitPriceLabel()
	{
		// Найти с пометкой путешествие по работе как минимум два отеля в Вильнюсе на неделю с 23 по 29 декабря с надписью "выгодный вариант".
		PageFactory.initElements(driver, BookingMainPage.class).openAccomodationsPageFilter(DESTINATION_3, 1, 0, 1, true);
		PageFactory.initElements(driver, BookingAccomodationsPage.class).accomodationWorkPrPrice(driver, DESTINATION_3, 2);		
	}
	
	@Test(description = "Найти на 2 дня с 31 декабря по 1 января на двоих 1 и более занятых варианта проживания")
	public void abc3()
	{
		// Найти с 31 декабря по 1 января на двоих 1 и более вариантов проживания с надписью "Вы не успели!" 

	}
	
	@Test(description = "")
	public void abc4()
	{
		//Open ...

	}
	
	@Test(description = "")
	public void abc5()
	{
		//Open ...

	}
	
	@Test(description = "")
	public void abc6()
	{
		//Open ...

	}
	
	@AfterClass(description = "Stop Browser")
	public void stopBrowser()
	{
		//driver.quit();
	}
}
